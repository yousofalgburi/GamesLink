generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  votes         Vote[]
  credits       Int       @default(5)

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Comment     Comment[]
  CommentVote CommentVote[]

  sentRequests     FriendRequest[] @relation("requestFrom")
  receivedRequests FriendRequest[] @relation("requestTo")

  rooms Room[] @relation("RoomMembers")
}

model SteamGame {
  id               Int       @id @default(autoincrement())
  steamAppId       String    @unique
  name             String    @db.VarChar(255)
  shortDescription String    @db.VarChar(1000)
  headerImage      String    @db.VarChar(1000)
  requiredAge      Int
  isFree           Boolean
  releaseDate      DateTime?
  developers       String[]
  categories       String[]
  genres           String[]

  comments  Comment[]
  votes     Vote[]
  voteCount Int       @default(0)

  @@index([name, categories, genres])
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  user   User      @relation(fields: [userId], references: [id])
  userId String
  game   SteamGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId Int
  type   VoteType

  @@id([userId, gameId])
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  game      SteamGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    Int

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  voteCount Int           @default(0)
  commentId String?
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  id         String              @id @default(cuid())
  fromUserId String
  toUserId   String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())

  requestFrom User @relation("requestFrom", fields: [fromUserId], references: [id])
  requestTo   User @relation("requestTo", fields: [toUserId], references: [id])
}

model Friendship {
  id       String @id @default(cuid())
  userId   String
  friendId String

  @@unique([userId, friendId])
  @@index([friendId])
}

model Room {
  id           String   @id @default(cuid())
  hostId       String
  roomId       String   @unique
  isActive     Boolean  @default(true)
  isPublic     Boolean  @default(true)
  queuedUsers  String[]
  allowedUsers String[]
  members      User[]   @relation("RoomMembers")
  createdAt    DateTime @default(now())
}
