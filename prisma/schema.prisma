generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL_2")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    votes         Vote[]
    credits       Int       @default(5)

    username String? @unique

    image       String?
    accounts    Account[]
    sessions    Session[]
    Comment     Comment[]
    CommentVote CommentVote[]

    sentRequests     FriendRequest[] @relation("requestFrom")
    receivedRequests FriendRequest[] @relation("requestTo")

    rooms Room[] @relation("RoomMembers")
}

model Vote {
    user   User          @relation(fields: [userId], references: [id])
    userId String
    game   ProcessedGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId Int
    type   String

    @@id([userId, gameId])
}

model Comment {
    id        String        @id @default(cuid())
    text      String
    createdAt DateTime      @default(now())
    author    User          @relation(fields: [authorId], references: [id])
    authorId  String
    game      ProcessedGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId    Int

    replyToId String?
    replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies   Comment[] @relation("ReplyTo")

    votes     CommentVote[]
    voteCount Int           @default(0)
    commentId String?
}

model CommentVote {
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String
    type      String

    @@id([userId, commentId])
}

model FriendRequest {
    id         String   @id @default(cuid())
    fromUserId String
    toUserId   String
    status     String
    createdAt  DateTime @default(now())

    requestFrom User @relation("requestFrom", fields: [fromUserId], references: [id])
    requestTo   User @relation("requestTo", fields: [toUserId], references: [id])
}

model Friendship {
    id       String @id @default(cuid())
    userId   String
    friendId String

    @@unique([userId, friendId])
    @@index([friendId])
}

model Room {
    id           String   @id @default(cuid())
    hostId       String
    roomId       String   @unique
    isActive     Boolean  @default(true)
    isPublic     Boolean  @default(true)
    queuedUsers  String
    allowedUsers String
    members      User[]   @relation("RoomMembers")
    createdAt    DateTime @default(now())
}

// NEW SCHEMAS
model Game {
    appId      String    @id @unique
    name       String
    loaded     Boolean   @default(false)
    loadedDate DateTime?
    createdAt  DateTime  @default(now())
}

model ProcessedGame {
    id                   Int      @id @default(autoincrement())
    appId                String   @unique
    name                 String
    type                 String?
    requiredAge          Int
    isFree               Boolean
    dlc                  String
    detailedDescription  String
    aboutTheGame         String
    shortDescription     String
    supportedLanguages   String
    reviews              String?
    headerImage          String
    capsuleImage         String
    capsuleImagev5       String
    website              String?
    developers           String
    publishers           String
    recommendations      Int?
    background           String
    backgroundRaw        String
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    platformId           Int
    legalNotice          String?
    controllerSupport    String?
    fullgame             String?
    steamAppid           Int?
    additionalData       String?
    packages             String
    extUserAccountNotice String?

    pcRequirements    PcRequirements?
    linuxRequirements LinuxRequirements?
    macRequirements   MacRequirements?

    releaseDate        ReleaseDate?
    supportInfo        SupportInfo?
    contentDescriptors ContentDescriptors?

    priceOverview PriceOverview?
    packageGroups PackageGroup[]

    platforms    Platform       @relation(fields: [platformId], references: [id])
    categories   GameCategory[]
    genres       GameGenre[]
    screenshots  Screenshot[]
    movies       Movie[]
    achievements Achievement[]
    ratings      Rating[]
    demos        Demo[]
    metacritic   Metacritic?

    // Added Values
    voteCount Int       @default(0)
    votes     Vote[]
    comments  Comment[]

    @@index([type, voteCount, id]) // Supports type filtering and sorting by popularity
    @@index([name]) // Supports fast text search on name
    @@index([shortDescription]) // Supports fast text search on shortDescription
    @@index([type, name]) // Supports combined type and name filtering
    @@index([type, shortDescription]) // Supports combined type and shortDescription filtering
    @@index([isFree, type, voteCount]) // Supports filtering by free games and sorting
    @@index([requiredAge, type, voteCount]) // Supports age restriction filtering
    @@index([createdAt, type, voteCount]) // Supports sorting by newest games
    @@index([updatedAt, type, voteCount]) // Supports sorting by recently updated games
    @@index([platformId])
}

model Platform {
    id            Int             @id @default(autoincrement())
    windows       Boolean
    mac           Boolean
    linux         Boolean
    ProcessedGame ProcessedGame[]
}

model PcRequirements {
    id          Int           @id @default(autoincrement())
    gameId      Int           @unique
    game        ProcessedGame @relation(fields: [gameId], references: [id])
    minimum     String
    recommended String?
}

model MacRequirements {
    id          Int           @id @default(autoincrement())
    gameId      Int           @unique
    game        ProcessedGame @relation(fields: [gameId], references: [id])
    minimum     String
    recommended String?
}

model LinuxRequirements {
    id          Int           @id @default(autoincrement())
    gameId      Int           @unique
    game        ProcessedGame @relation(fields: [gameId], references: [id])
    minimum     String
    recommended String?
}

model ReleaseDate {
    id         Int           @id @default(autoincrement())
    gameId     Int           @unique
    game       ProcessedGame @relation(fields: [gameId], references: [id])
    comingSoon Boolean
    date       String
}

model SupportInfo {
    id     Int           @id @default(autoincrement())
    gameId Int           @unique
    game   ProcessedGame @relation(fields: [gameId], references: [id])
    url    String?
    email  String?
}

model ContentDescriptors {
    id     Int           @id @default(autoincrement())
    gameId Int           @unique
    game   ProcessedGame @relation(fields: [gameId], references: [id])
    ids    String
    notes  String?
}

model PriceOverview {
    id               Int           @id @default(autoincrement())
    gameId           Int           @unique
    game             ProcessedGame @relation(fields: [gameId], references: [id])
    currency         String
    initial          Int
    final            Int
    discountPercent  Int
    initialFormatted String
    finalFormatted   String
}

model PackageGroup {
    id                      Int           @id @default(autoincrement())
    gameId                  Int
    game                    ProcessedGame @relation(fields: [gameId], references: [id])
    name                    String
    title                   String
    description             String?
    selectionText           String
    saveText                String?
    displayType             Int
    isRecurringSubscription String
    subs                    Sub[]
}

model Sub {
    id                       Int          @id @default(autoincrement())
    packageGroupId           Int
    packageGroup             PackageGroup @relation(fields: [packageGroupId], references: [id])
    packageid                Int
    percentSavingsText       String?
    percentSavings           Int
    optionText               String
    optionDescription        String?
    canGetFreeLicense        String
    isFreeLicense            Boolean
    priceInCentsWithDiscount Int
}

model GameCategory {
    id          Int           @id @default(autoincrement())
    gameId      Int
    game        ProcessedGame @relation(fields: [gameId], references: [id])
    description String

    @@unique([gameId, id])
    @@index([gameId, description])
}

model GameGenre {
    id          Int           @id @default(autoincrement())
    gameId      Int
    game        ProcessedGame @relation(fields: [gameId], references: [id])
    description String

    @@unique([gameId, id])
    @@index([gameId, description])
}

model Screenshot {
    id            Int           @id @default(autoincrement())
    gameId        Int
    game          ProcessedGame @relation(fields: [gameId], references: [id])
    pathThumbnail String
    pathFull      String

    @@unique([gameId, id])
}

model Movie {
    id        Int           @id @default(autoincrement())
    gameId    Int
    game      ProcessedGame @relation(fields: [gameId], references: [id])
    name      String
    thumbnail String
    webm      String
    mp4       String
    highlight Boolean

    @@unique([gameId, id])
}

model Achievement {
    id     Int           @id @default(autoincrement())
    gameId Int
    game   ProcessedGame @relation(fields: [gameId], references: [id])
    name   String
    path   String
}

model Rating {
    id              Int           @id @default(autoincrement())
    gameId          Int
    game            ProcessedGame @relation(fields: [gameId], references: [id])
    source          String
    ratingGenerated String
    rating          String
    requiredAge     String
    banned          String
    useAgeGate      String
    descriptors     String?

    @@unique([gameId, source])
}

model Demo {
    id          Int           @id @default(autoincrement())
    appid       Int
    description String?
    game        ProcessedGame @relation(fields: [gameId], references: [id])
    gameId      Int

    @@unique([gameId, appid])
}

model Metacritic {
    id     Int           @id @default(autoincrement())
    url    String?
    score  Int?
    game   ProcessedGame @relation(fields: [gameId], references: [id])
    gameId Int           @unique
}
